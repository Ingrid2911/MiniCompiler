//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/facultate/anul_2/LFC/Program/Program/Program/miniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class miniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, DOUBLE=3, STRING=4, VOID=5, IF=6, ELSE=7, FOR=8, WHILE=9, 
		RETURN=10, ARITHMETIC_OPERATOR=11, RELATIONAL_OPERATOR=12, LOGICAL_OPERATOR=13, 
		ASSIGNMENT_OPERATOR=14, INCREMENT_OPERATOR=15, DECREMENT_OPERATOR=16, 
		LPAREN=17, RPAREN=18, LBRACE=19, RBRACE=20, COMMA=21, SEMICOLON=22, IDENTIFIER=23, 
		NUMBER=24, STRING_LITERAL=25, WS=26, COMMENT=27, MULTILINE_COMMENT=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "FLOAT", "DOUBLE", "STRING", "VOID", "IF", "ELSE", "FOR", "WHILE", 
		"RETURN", "ARITHMETIC_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OPERATOR", 
		"ASSIGNMENT_OPERATOR", "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "IDENTIFIER", "NUMBER", 
		"STRING_LITERAL", "WS", "COMMENT", "MULTILINE_COMMENT"
	};


	public miniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public miniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'double'", "'string'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'return'", null, null, null, null, "'++'", "'--'", 
		"'('", "')'", "'{'", "'}'", "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "DOUBLE", "STRING", "VOID", "IF", "ELSE", "FOR", 
		"WHILE", "RETURN", "ARITHMETIC_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OPERATOR", 
		"ASSIGNMENT_OPERATOR", "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "IDENTIFIER", "NUMBER", 
		"STRING_LITERAL", "WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "miniLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static miniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,223,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,123,8,11,1,
		12,1,12,1,12,1,12,1,12,3,12,130,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,3,13,143,8,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,5,22,165,
		8,22,10,22,12,22,168,9,22,1,23,4,23,171,8,23,11,23,12,23,172,1,23,1,23,
		4,23,177,8,23,11,23,12,23,178,3,23,181,8,23,1,24,1,24,5,24,185,8,24,10,
		24,12,24,188,9,24,1,24,1,24,1,25,4,25,193,8,25,11,25,12,25,194,1,25,1,
		25,1,26,1,26,1,26,1,26,5,26,203,8,26,10,26,12,26,206,9,26,1,26,1,26,1,
		27,1,27,1,27,1,27,5,27,214,8,27,10,27,12,27,217,9,27,1,27,1,27,1,27,1,
		27,1,27,1,215,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,28,1,0,8,4,0,37,37,42,43,45,45,47,47,2,0,60,
		60,62,62,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
		2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,241,0,1,1,0,0,0,0,
		3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
		0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,
		0,3,61,1,0,0,0,5,67,1,0,0,0,7,74,1,0,0,0,9,81,1,0,0,0,11,86,1,0,0,0,13,
		89,1,0,0,0,15,94,1,0,0,0,17,98,1,0,0,0,19,104,1,0,0,0,21,111,1,0,0,0,23,
		122,1,0,0,0,25,129,1,0,0,0,27,142,1,0,0,0,29,144,1,0,0,0,31,147,1,0,0,
		0,33,150,1,0,0,0,35,152,1,0,0,0,37,154,1,0,0,0,39,156,1,0,0,0,41,158,1,
		0,0,0,43,160,1,0,0,0,45,162,1,0,0,0,47,170,1,0,0,0,49,182,1,0,0,0,51,192,
		1,0,0,0,53,198,1,0,0,0,55,209,1,0,0,0,57,58,5,105,0,0,58,59,5,110,0,0,
		59,60,5,116,0,0,60,2,1,0,0,0,61,62,5,102,0,0,62,63,5,108,0,0,63,64,5,111,
		0,0,64,65,5,97,0,0,65,66,5,116,0,0,66,4,1,0,0,0,67,68,5,100,0,0,68,69,
		5,111,0,0,69,70,5,117,0,0,70,71,5,98,0,0,71,72,5,108,0,0,72,73,5,101,0,
		0,73,6,1,0,0,0,74,75,5,115,0,0,75,76,5,116,0,0,76,77,5,114,0,0,77,78,5,
		105,0,0,78,79,5,110,0,0,79,80,5,103,0,0,80,8,1,0,0,0,81,82,5,118,0,0,82,
		83,5,111,0,0,83,84,5,105,0,0,84,85,5,100,0,0,85,10,1,0,0,0,86,87,5,105,
		0,0,87,88,5,102,0,0,88,12,1,0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,
		5,115,0,0,92,93,5,101,0,0,93,14,1,0,0,0,94,95,5,102,0,0,95,96,5,111,0,
		0,96,97,5,114,0,0,97,16,1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,101,
		5,105,0,0,101,102,5,108,0,0,102,103,5,101,0,0,103,18,1,0,0,0,104,105,5,
		114,0,0,105,106,5,101,0,0,106,107,5,116,0,0,107,108,5,117,0,0,108,109,
		5,114,0,0,109,110,5,110,0,0,110,20,1,0,0,0,111,112,7,0,0,0,112,22,1,0,
		0,0,113,123,7,1,0,0,114,115,5,60,0,0,115,123,5,61,0,0,116,117,5,62,0,0,
		117,123,5,61,0,0,118,119,5,61,0,0,119,123,5,61,0,0,120,121,5,33,0,0,121,
		123,5,61,0,0,122,113,1,0,0,0,122,114,1,0,0,0,122,116,1,0,0,0,122,118,1,
		0,0,0,122,120,1,0,0,0,123,24,1,0,0,0,124,125,5,38,0,0,125,130,5,38,0,0,
		126,127,5,124,0,0,127,130,5,124,0,0,128,130,5,33,0,0,129,124,1,0,0,0,129,
		126,1,0,0,0,129,128,1,0,0,0,130,26,1,0,0,0,131,143,5,61,0,0,132,133,5,
		43,0,0,133,143,5,61,0,0,134,135,5,45,0,0,135,143,5,61,0,0,136,137,5,42,
		0,0,137,143,5,61,0,0,138,139,5,47,0,0,139,143,5,61,0,0,140,141,5,37,0,
		0,141,143,5,61,0,0,142,131,1,0,0,0,142,132,1,0,0,0,142,134,1,0,0,0,142,
		136,1,0,0,0,142,138,1,0,0,0,142,140,1,0,0,0,143,28,1,0,0,0,144,145,5,43,
		0,0,145,146,5,43,0,0,146,30,1,0,0,0,147,148,5,45,0,0,148,149,5,45,0,0,
		149,32,1,0,0,0,150,151,5,40,0,0,151,34,1,0,0,0,152,153,5,41,0,0,153,36,
		1,0,0,0,154,155,5,123,0,0,155,38,1,0,0,0,156,157,5,125,0,0,157,40,1,0,
		0,0,158,159,5,44,0,0,159,42,1,0,0,0,160,161,5,59,0,0,161,44,1,0,0,0,162,
		166,7,2,0,0,163,165,7,3,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,
		0,0,0,166,167,1,0,0,0,167,46,1,0,0,0,168,166,1,0,0,0,169,171,7,4,0,0,170,
		169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,180,1,
		0,0,0,174,176,5,46,0,0,175,177,7,4,0,0,176,175,1,0,0,0,177,178,1,0,0,0,
		178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,174,1,0,0,0,180,181,
		1,0,0,0,181,48,1,0,0,0,182,186,5,34,0,0,183,185,8,5,0,0,184,183,1,0,0,
		0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,
		186,1,0,0,0,189,190,5,34,0,0,190,50,1,0,0,0,191,193,7,6,0,0,192,191,1,
		0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,
		196,197,6,25,0,0,197,52,1,0,0,0,198,199,5,47,0,0,199,200,5,47,0,0,200,
		204,1,0,0,0,201,203,8,7,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,
		0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,6,26,0,0,
		208,54,1,0,0,0,209,210,5,47,0,0,210,211,5,42,0,0,211,215,1,0,0,0,212,214,
		9,0,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,0,0,
		0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,42,0,0,219,220,5,47,0,0,220,
		221,1,0,0,0,221,222,6,27,0,0,222,56,1,0,0,0,12,0,122,129,142,166,172,178,
		180,186,194,204,215,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
